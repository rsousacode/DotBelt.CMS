schema {
  query: DotBeltQuery
  mutation: DotBeltMutation
}

type ApplicationUser {
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type CreatePostPayload {
  postResponse: PostResponse
}

type DeleteUploadsPayload {
  removeUploadsResult: RemoveUploadsResult
}

type DotBeltMutation {
  editPost(input: EditPostInput!): EditPostPayload! @authorize
  createPost(input: CreatePostInput!): CreatePostPayload! @authorize
  deleteUploads(input: DeleteUploadsInput!): DeleteUploadsPayload! @authorize
}

type DotBeltQuery {
  posts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PostResponseFilterInput order: [PostResponseSortInput!]): PostsConnection
  publishedPosts: [PostResponse!]!
  postById(id: Int!): [PostResponse!]! @authorize
  postByUrl(url: String!): [PostResponse!]!
  homepage: [PostResponse!]!
  taxonomies("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TaxonomyFilterInput order: [TaxonomySortInput!]): TaxonomiesConnection
  taxonomyById(id: Int!): [Taxonomy!]!
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UserResponseFilterInput order: [UserResponseSortInput!]): UsersConnection
  tenantById(id: Int!): [TenantResponse!]!
  session: SessionData!
  uploads("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ThumbnailResponseFilterInput order: [ThumbnailResponseSortInput!]): UploadsConnection @authorize
  uploadById(id: Int!): [UploadResponse!]! @authorize
}

type EditPostPayload {
  postResponse: PostResponse
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Post {
  id: Int!
  title: String
  description: String
  relativeUrl: String!
  inTrash: Boolean
  fullUrl: String
  content: String
  publishDate: DateTime!
  modifiedDate: DateTime
  author: ApplicationUser
  authorId: Int!
  postType: PostTypeEnum!
  parentPost: Post
  parentPostId: Int
  childrenPosts: [Post!]!
  status: PostStatus!
  taxonomies: [Taxonomy!]
  tenant: Tenant
  tenantId: Int!
  featuredImage: Upload
  featuredImageId: Int
}

type PostResponse {
  id: Int
  title: String
  description: String
  relativeUrl: String!
  fullUrl: String
  content: String
  publishDate: DateTime
  modifiedDate: DateTime
  author: UserResponse
  authorId: Int
  postType: PostTypeEnum
  parentPostId: Int
  featuredImage: UploadResponse
  featuredImageId: Int
  status: PostStatus!
  taxonomies: [TaxonomyResponse!]
}

"A connection to a list of items."
type PostsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PostsEdge!]
  "A flattened list of the nodes."
  nodes: [PostResponse!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PostsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PostResponse!
}

type RemoveUploadsResult {
  deletedIds: [Int!]
}

type SessionData {
  id: Int
  email: String
  userName: String
  isAuthenticated: Boolean!
}

"A connection to a list of items."
type TaxonomiesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TaxonomiesEdge!]
  "A flattened list of the nodes."
  nodes: [Taxonomy!]
}

"An edge in a connection."
type TaxonomiesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Taxonomy!
}

type Taxonomy {
  id: Int!
  title: String
  relativeUrl: String!
  fullUrl: String
  inTrash: Boolean
  publishDate: DateTime!
  modifiedDate: DateTime
  tenant: Tenant
  tenantId: Int!
  description: String
  author: ApplicationUser
  authorId: Int!
  type: TaxonomyTypeEnum!
  parentTaxonomyId: Int
  posts: [Post!]!
}

type TaxonomyResponse {
  id: Int!
  title: String
  relativeUrl: String!
  publishDate: DateTime!
  modifiedDate: DateTime
  description: String
  author: UserResponse
  authorId: Int
  type: TaxonomyTypeEnum!
  parentTaxonomyId: Int
}

type Tenant {
  id: Int!
  name: String!
  fullUrl: String!
  homepageId: Int
  homepage: Post
  allowedFileTypes: [String!]!
  posts: [Post!]!
  taxonomies: [Taxonomy!]!
}

type TenantResponse {
  id: Int!
  name: String!
  fullUrl: String!
  allowedFileTypes: [String!]!
}

type Thumbnail {
  id: Int!
  name: String!
  upload: Upload!
  uploadId: Int!
  publishDate: DateTime!
  mimeType: String!
  fileName: String!
  relativeUrl: String!
  length: Int!
}

type ThumbnailResponse {
  id: Int
  name: String
  upload: UploadResponse
  uploadId: Int
  publishDate: DateTime
  mimeType: String
  fileName: String
  relativeUrl: String
  length: Int
}

type Upload {
  id: Int!
  title: String
  description: String
  altText: String
  caption: String
  fileName: String!
  mimeType: String!
  length: Int!
  author: ApplicationUser
  authorId: Int!
  relativeUrl: String!
  fullUrl: String
  inTrash: Boolean
  publishDate: DateTime!
  modifiedDate: DateTime
  tenant: Tenant
  tenantId: Int!
  metaData: String
  thumbnails: [Thumbnail!]
}

type UploadResponse {
  id: Int
  title: String
  description: String
  altText: String
  caption: String
  fileName: String
  mimeType: String
  length: Int
  relativeUrl: String
  fullUrl: String
  publishDate: DateTime
  modifiedDate: DateTime
  metaData: String
  author: UserResponse
}

"A connection to a list of items."
type UploadsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UploadsEdge!]
  "A flattened list of the nodes."
  nodes: [ThumbnailResponse!]
}

"An edge in a connection."
type UploadsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ThumbnailResponse!
}

type UserResponse {
  id: Int
  userName: String
  email: String
  emailConfirmed: Boolean
  phoneNumber: String
  twoFactorEnabled: Boolean
  lockoutEnabled: Boolean
  accessFailedCount: Int
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [UserResponse!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserResponse!
}

input ApplicationUserFilterInput {
  and: [ApplicationUserFilterInput!]
  or: [ApplicationUserFilterInput!]
  id: IntOperationFilterInput
  userName: StringOperationFilterInput
  normalizedUserName: StringOperationFilterInput
  email: StringOperationFilterInput
  normalizedEmail: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  passwordHash: StringOperationFilterInput
  securityStamp: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  lockoutEnd: DateTimeOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
  accessFailedCount: IntOperationFilterInput
}

input ApplicationUserSortInput {
  id: SortEnumType
  userName: SortEnumType
  normalizedUserName: SortEnumType
  email: SortEnumType
  normalizedEmail: SortEnumType
  emailConfirmed: SortEnumType
  passwordHash: SortEnumType
  securityStamp: SortEnumType
  concurrencyStamp: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnd: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CreatePostInput {
  type: PostTypeEnum!
  payload: PostResponseInput!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DeleteUploadsInput {
  uploadIds: [Int!]!
}

input EditPostInput {
  postId: Int!
  payload: PostResponseInput!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfPostFilterInput {
  all: PostFilterInput
  none: PostFilterInput
  some: PostFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTaxonomyFilterInput {
  all: TaxonomyFilterInput
  none: TaxonomyFilterInput
  some: TaxonomyFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTaxonomyResponseFilterInput {
  all: TaxonomyResponseFilterInput
  none: TaxonomyResponseFilterInput
  some: TaxonomyResponseFilterInput
  any: Boolean
}

input ListFilterInputTypeOfThumbnailFilterInput {
  all: ThumbnailFilterInput
  none: ThumbnailFilterInput
  some: ThumbnailFilterInput
  any: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input NullableOfPostTypeEnumOperationFilterInput {
  eq: PostTypeEnum
  neq: PostTypeEnum
  in: [PostTypeEnum]
  nin: [PostTypeEnum]
}

input PostFilterInput {
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  relativeUrl: StringOperationFilterInput
  inTrash: BooleanOperationFilterInput
  fullUrl: StringOperationFilterInput
  content: StringOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  modifiedDate: DateTimeOperationFilterInput
  author: ApplicationUserFilterInput
  authorId: IntOperationFilterInput
  postType: PostTypeEnumOperationFilterInput
  parentPost: PostFilterInput
  parentPostId: IntOperationFilterInput
  childrenPosts: ListFilterInputTypeOfPostFilterInput
  status: PostStatusOperationFilterInput
  taxonomies: ListFilterInputTypeOfTaxonomyFilterInput
  tenant: TenantFilterInput
  tenantId: IntOperationFilterInput
  featuredImage: UploadFilterInput
  featuredImageId: IntOperationFilterInput
}

input PostResponseFilterInput {
  and: [PostResponseFilterInput!]
  or: [PostResponseFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  relativeUrl: StringOperationFilterInput
  fullUrl: StringOperationFilterInput
  content: StringOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  modifiedDate: DateTimeOperationFilterInput
  author: UserResponseFilterInput
  authorId: IntOperationFilterInput
  postType: NullableOfPostTypeEnumOperationFilterInput
  parentPostId: IntOperationFilterInput
  featuredImage: UploadResponseFilterInput
  featuredImageId: IntOperationFilterInput
  status: PostStatusOperationFilterInput
  taxonomies: ListFilterInputTypeOfTaxonomyResponseFilterInput
}

input PostResponseInput {
  id: Int
  title: String
  description: String
  relativeUrl: String!
  fullUrl: String
  content: String
  publishDate: DateTime
  modifiedDate: DateTime
  author: UserResponseInput
  authorId: Int
  postType: PostTypeEnum
  parentPostId: Int
  featuredImage: UploadResponseInput
  featuredImageId: Int
  status: PostStatus!
  taxonomies: [TaxonomyResponseInput!]
}

input PostResponseSortInput {
  id: SortEnumType
  title: SortEnumType
  description: SortEnumType
  relativeUrl: SortEnumType
  fullUrl: SortEnumType
  content: SortEnumType
  publishDate: SortEnumType
  modifiedDate: SortEnumType
  author: UserResponseSortInput
  authorId: SortEnumType
  postType: SortEnumType
  parentPostId: SortEnumType
  featuredImage: UploadResponseSortInput
  featuredImageId: SortEnumType
  status: SortEnumType
}

input PostSortInput {
  id: SortEnumType
  title: SortEnumType
  description: SortEnumType
  relativeUrl: SortEnumType
  inTrash: SortEnumType
  fullUrl: SortEnumType
  content: SortEnumType
  publishDate: SortEnumType
  modifiedDate: SortEnumType
  author: ApplicationUserSortInput
  authorId: SortEnumType
  postType: SortEnumType
  parentPost: PostSortInput
  parentPostId: SortEnumType
  status: SortEnumType
  tenant: TenantSortInput
  tenantId: SortEnumType
  featuredImage: UploadSortInput
  featuredImageId: SortEnumType
}

input PostStatusOperationFilterInput {
  eq: PostStatus
  neq: PostStatus
  in: [PostStatus!]
  nin: [PostStatus!]
}

input PostTypeEnumOperationFilterInput {
  eq: PostTypeEnum
  neq: PostTypeEnum
  in: [PostTypeEnum!]
  nin: [PostTypeEnum!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TaxonomyFilterInput {
  and: [TaxonomyFilterInput!]
  or: [TaxonomyFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  relativeUrl: StringOperationFilterInput
  fullUrl: StringOperationFilterInput
  inTrash: BooleanOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  modifiedDate: DateTimeOperationFilterInput
  tenant: TenantFilterInput
  tenantId: IntOperationFilterInput
  description: StringOperationFilterInput
  author: ApplicationUserFilterInput
  authorId: IntOperationFilterInput
  type: TaxonomyTypeEnumOperationFilterInput
  parentTaxonomyId: IntOperationFilterInput
  posts: ListFilterInputTypeOfPostFilterInput
}

input TaxonomyResponseFilterInput {
  and: [TaxonomyResponseFilterInput!]
  or: [TaxonomyResponseFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  relativeUrl: StringOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  modifiedDate: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  author: UserResponseFilterInput
  authorId: IntOperationFilterInput
  type: TaxonomyTypeEnumOperationFilterInput
  parentTaxonomyId: IntOperationFilterInput
}

input TaxonomyResponseInput {
  id: Int!
  title: String
  relativeUrl: String!
  publishDate: DateTime!
  modifiedDate: DateTime
  description: String
  author: UserResponseInput
  authorId: Int
  type: TaxonomyTypeEnum!
  parentTaxonomyId: Int
}

input TaxonomySortInput {
  id: SortEnumType
  title: SortEnumType
  relativeUrl: SortEnumType
  fullUrl: SortEnumType
  inTrash: SortEnumType
  publishDate: SortEnumType
  modifiedDate: SortEnumType
  tenant: TenantSortInput
  tenantId: SortEnumType
  description: SortEnumType
  author: ApplicationUserSortInput
  authorId: SortEnumType
  type: SortEnumType
  parentTaxonomyId: SortEnumType
}

input TaxonomyTypeEnumOperationFilterInput {
  eq: TaxonomyTypeEnum
  neq: TaxonomyTypeEnum
  in: [TaxonomyTypeEnum!]
  nin: [TaxonomyTypeEnum!]
}

input TenantFilterInput {
  and: [TenantFilterInput!]
  or: [TenantFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  fullUrl: StringOperationFilterInput
  homepageId: IntOperationFilterInput
  homepage: PostFilterInput
  allowedFileTypes: ListStringOperationFilterInput
  posts: ListFilterInputTypeOfPostFilterInput
  taxonomies: ListFilterInputTypeOfTaxonomyFilterInput
}

input TenantSortInput {
  id: SortEnumType
  name: SortEnumType
  fullUrl: SortEnumType
  homepageId: SortEnumType
  homepage: PostSortInput
}

input ThumbnailFilterInput {
  and: [ThumbnailFilterInput!]
  or: [ThumbnailFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  upload: UploadFilterInput
  uploadId: IntOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  mimeType: StringOperationFilterInput
  fileName: StringOperationFilterInput
  relativeUrl: StringOperationFilterInput
  length: IntOperationFilterInput
}

input ThumbnailResponseFilterInput {
  and: [ThumbnailResponseFilterInput!]
  or: [ThumbnailResponseFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  upload: UploadResponseFilterInput
  uploadId: IntOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  mimeType: StringOperationFilterInput
  fileName: StringOperationFilterInput
  relativeUrl: StringOperationFilterInput
  length: IntOperationFilterInput
}

input ThumbnailResponseSortInput {
  id: SortEnumType
  name: SortEnumType
  upload: UploadResponseSortInput
  uploadId: SortEnumType
  publishDate: SortEnumType
  mimeType: SortEnumType
  fileName: SortEnumType
  relativeUrl: SortEnumType
  length: SortEnumType
}

input UploadFilterInput {
  and: [UploadFilterInput!]
  or: [UploadFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  altText: StringOperationFilterInput
  caption: StringOperationFilterInput
  fileName: StringOperationFilterInput
  mimeType: StringOperationFilterInput
  length: IntOperationFilterInput
  author: ApplicationUserFilterInput
  authorId: IntOperationFilterInput
  relativeUrl: StringOperationFilterInput
  fullUrl: StringOperationFilterInput
  inTrash: BooleanOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  modifiedDate: DateTimeOperationFilterInput
  tenant: TenantFilterInput
  tenantId: IntOperationFilterInput
  metaData: StringOperationFilterInput
  thumbnails: ListFilterInputTypeOfThumbnailFilterInput
}

input UploadResponseFilterInput {
  and: [UploadResponseFilterInput!]
  or: [UploadResponseFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  altText: StringOperationFilterInput
  caption: StringOperationFilterInput
  fileName: StringOperationFilterInput
  mimeType: StringOperationFilterInput
  length: IntOperationFilterInput
  relativeUrl: StringOperationFilterInput
  fullUrl: StringOperationFilterInput
  publishDate: DateTimeOperationFilterInput
  modifiedDate: DateTimeOperationFilterInput
  metaData: StringOperationFilterInput
  author: UserResponseFilterInput
}

input UploadResponseInput {
  id: Int
  title: String
  description: String
  altText: String
  caption: String
  fileName: String
  mimeType: String
  length: Int
  relativeUrl: String
  fullUrl: String
  publishDate: DateTime
  modifiedDate: DateTime
  metaData: String
  author: UserResponseInput
}

input UploadResponseSortInput {
  id: SortEnumType
  title: SortEnumType
  description: SortEnumType
  altText: SortEnumType
  caption: SortEnumType
  fileName: SortEnumType
  mimeType: SortEnumType
  length: SortEnumType
  relativeUrl: SortEnumType
  fullUrl: SortEnumType
  publishDate: SortEnumType
  modifiedDate: SortEnumType
  metaData: SortEnumType
  author: UserResponseSortInput
}

input UploadSortInput {
  id: SortEnumType
  title: SortEnumType
  description: SortEnumType
  altText: SortEnumType
  caption: SortEnumType
  fileName: SortEnumType
  mimeType: SortEnumType
  length: SortEnumType
  author: ApplicationUserSortInput
  authorId: SortEnumType
  relativeUrl: SortEnumType
  fullUrl: SortEnumType
  inTrash: SortEnumType
  publishDate: SortEnumType
  modifiedDate: SortEnumType
  tenant: TenantSortInput
  tenantId: SortEnumType
  metaData: SortEnumType
}

input UserResponseFilterInput {
  and: [UserResponseFilterInput!]
  or: [UserResponseFilterInput!]
  id: IntOperationFilterInput
  userName: StringOperationFilterInput
  email: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  phoneNumber: StringOperationFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
  accessFailedCount: IntOperationFilterInput
}

input UserResponseInput {
  id: Int
  userName: String
  email: String
  emailConfirmed: Boolean
  phoneNumber: String
  twoFactorEnabled: Boolean
  lockoutEnabled: Boolean
  accessFailedCount: Int
}

input UserResponseSortInput {
  id: SortEnumType
  userName: SortEnumType
  email: SortEnumType
  emailConfirmed: SortEnumType
  phoneNumber: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum PostTypeEnum {
  UNDEFINED
  POST
  PAGE
  MENU_ITEM
}

enum SortEnumType {
  ASC
  DESC
}

enum TaxonomyTypeEnum {
  UNDEFINED
  CATEGORY
  TAG
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")